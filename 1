class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
        self.avg = 0
    def rate_hw(self, lecture, course, grade):
        if isinstance(lecture, Lecture) and course in self.courses_in_progress and course in lecture.courses_attached:
            if course in lecture.grades:
                lecture.grades[course] += [grade]
            else:
                lecture.grades[course] = [grade]
        else:
            return 'Ошибка'	
    def mean(self):
        avgvallec = (sum(map(sum,self.grades.values())))
        lenlec= (len(list(self.grades.values())[0]))
        self.avg = avgvallec/lenlec
        return self.avg
    def __eq__(self, other):
        sc= other if isinstance(other,int) else other.avg
        return self.avg == sc
    def __lt__(self, other):
        sc= other if isinstance(other,int) else other.avg
        return self.avg < sc
    def __le__(self, other):
        sc= other if isinstance(other,int) else other.avg
        return self.avg <= sc

    def __str__(self):
        return f"('Имя:{self.name}\n Фамилия: {self.surname}\n Средняя оценка за домашнии задания:{self.avg}\n Курсы в процессе изучения: {','.join(self.courses_in_progress)}\n Завершенные курсы: Введение в программирование')"
class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
        self.avg = 0
        self.grades= {}
    def mean(self):
        avgvallec = (sum(map(sum,self.grades.values())))
        lenlec= (len(list(self.grades.values())[0]))
        self.avg = avgvallec/lenlec
        return self.avg
    def __eq__(self, other):
        sc= other if isinstance(other,int) else other.avg
        return self.avg == sc
    def __lt__(self, other):
        sc= other if isinstance(other,int) else other.avg
        return self.avg < sc
    def __le__(self, other):
        sc= other if isinstance(other,int) else other.avg
        return self.avg <= sc
class Lecture(Mentor): 
    def __str__(self):
        return f"('Имя:{self.name}\n Фамилия: {self.surname}\n Средняя оценка за лекции: {self.avg}')"
class Reviewer(Mentor):
	def __str__(self):
		return f"('Имя:{self.name}\n Фамилия: {self.surname}')"
	def rate_hw(self, student, course, grade):
		if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
			if course in student.grades:
				student.grades[course] += [grade]
			else:
				student.grades[course] = [grade]
		else:
			return 'Ошибка'
best_student = Student('Ruoy', 'Eman', 'your_gender')
best_student.courses_in_progress += ['Python']
 
cool_lecture = Lecture('John', 'Dubby')
cool_lecture.courses_attached += ['Python']
notcool_lecture = Lecture('Some','Buddy')
worst_student = Student('Lary', 'Lars', 'Terentiy')
notcool_lecture.courses_attached += ['Python']
worst_student.courses_in_progress += ['Python']
worst_student.rate_hw(notcool_lecture, 'Python', 1)
worst_student.rate_hw(notcool_lecture, 'Python', 1)
worst_student.rate_hw(notcool_lecture, 'Python', 1)
okreviewer = Reviewer('Totally','Ok')
okreviewer.courses_attached += ['Python']
okreviewer.rate_hw(best_student, 'Python', 10)
okreviewer.rate_hw(best_student, 'Python', 10)
okreviewer.rate_hw(best_student, 'Python', 10)
okreviewer.rate_hw(worst_student, 'Python', 1)
okreviewer.rate_hw(worst_student, 'Python', 1)
okreviewer.rate_hw(worst_student, 'Python', 1)
best_student.rate_hw(cool_lecture, 'Python', 10)
best_student.rate_hw(cool_lecture, 'Python', 10)
best_student.rate_hw(cool_lecture, 'Python', 10)
notcool_lecture.mean()
best_student.mean()
cool_lecture.mean()
worst_student.mean()



# print(notcool_lecture)
# print(worst_student)
# print(best_student)
# print(best_student != worst_student)
# print(cool_lecture!= notcool_lecture)



std=[best_student, worst_student]
def stdn(lst,crs):
    pth=0
    gt=0
    for i in range (len(lst)):
        if crs == 'Git':
            tmp = (sum(map(sum,lst[i].grades.values())))
            gt+=tmp
            count=1
        if crs == 'Python':
            tmp = (sum(map(sum,lst[i].grades.values())))
            pth+=tmp
            count=0
    if count==0:
        return print(pth)
    if count==1:
        return print(gt)

lec=[cool_lecture, notcool_lecture]
def lect(lst,crs):
    pth=0
    gt=0
    for i in range (len(lst)):
        if crs == 'Git':
            tmp = (sum(map(sum,lst[i].grades.values())))
            gt+=tmp
            count=1
        if crs == 'Python':
            tmp = (sum(map(sum,lst[i].grades.values())))
            pth+=tmp
            count=0
    if count==0:
        return print(pth)
    if count==1:
        return print(gt)
# stdn(std,'Python') 
# lect(lec,'Python')




